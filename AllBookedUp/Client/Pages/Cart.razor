@page "/cart"
@inject ICartService1 CartService1
@inject IProductService ProductService
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<h3>Shopping Cart</h3>

@if (!orderPlaced)
{
    @if (cartItems == null || cartItems.Count <= 0)
    {
        <span>You have no items in your cart.</span>
    }
    else
    {
<div>
        @foreach (var item in cartItems)
        {
            <div class="container">
                <div class="image-wrapper">
                    <img src="@item.Image" class="image" />
                </div>
                <div class="name">
                    <h5><a href="/product/@item.ProductId">@item.ProductTitle</a></h5>
                </div>
                <button class="btn-delete" @onclick="@(() => DeleteItem(item))">Delete</button>
                <div class="cart-product-price">£@item.Price</div>
            </div>
        }
    <div class="cart-product-price">
        Total (@cartItems.Count): £@cartItems.Sum(item => item.Price)
    </div>

    <div style="text-align: center; margin-top: 10px;">
        <button class="btn btn-primary btn-lg" @onclick="Download">Download</button>
    </div>
</div>
    }
}



@code {

    //creates list of cart items
    List<CartItem> cartItems = new List<CartItem>();
    bool orderPlaced = false;

    //sets list of items to whatever items are currently in the cart
    protected override async Task OnInitializedAsync()
    {
        cartItems = await CartService1.GetCartItems();
    }

    //deletes the item from cart
    private async Task DeleteItem(CartItem item)
    {
        await CartService1.DeleteItem(item);
        cartItems = await CartService1.GetCartItems();
    }

    private async Task PlaceOrder()
    {
        string checkoutUrl = await CartService1.Checkout();
        NavigationManager.NavigateTo(checkoutUrl);
        await CartService1.EmptyCart();
    }

    private async Task Download()
    {
        //accesses the cart service to access the items in cart
        var cart = await CartService1.GetCartItems();

        //downloads the title and description
        foreach (var item in cart)
        {
            var book = await ProductService.GetProductById(item.ProductId);
            await JSRuntime.InvokeVoidAsync("download", item.ProductTitle, book.Data.Description);
        }


    }

}
